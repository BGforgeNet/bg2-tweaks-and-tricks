/*
ACTION_IF FILE_EXISTS ~override/g_tnt_trap_modal.g_~ BEGIN
  OUTER_SPRINT traps_baf_modal ~~
END ELSE BEGIN
  OUTER_SPRINT traps_baf_modal ~NextTriggerObject(LastSeenBy)
ModalState(DETECTTRAPS)~
END
*/

ACTION_IF FILE_EXISTS ~override/g_tnt_trap_combat.g_~ BEGIN
  OUTER_SPRINT traps_baf_combat ~~
END ELSE BEGIN
  OUTER_SPRINT traps_baf_combat ~CombatCounterLT(1)~
END

ACTION_IF FILE_EXISTS ~override/g_tnt_trap_pause.g_~ BEGIN
  OUTER_SPRINT traps_baf_pause ~ActionOverride(LastSeenBy,PauseGame())~
END ELSE BEGIN
  OUTER_SPRINT traps_baf_pause ~~
END

ACTION_IF FILE_EXISTS ~override/g_tnt_trap_range.g_~ BEGIN
  OUTER_SPRINT traps_baf_range ~Range(LastSeenBy,30)~
END ELSE BEGIN
  OUTER_SPRINT traps_baf_range ~Range(LastSeenBy,15)~
END

ACTION_IF FILE_EXISTS ~override/g_tnt_trap_view.g_~ BEGIN
  OUTER_SPRINT traps_baf_view ~MoveViewObject(LastSeenBy,INSTANT)~
END ELSE BEGIN
  OUTER_SPRINT traps_baf_view ~~
END

ACTION_IF FILE_EXISTS ~override/g_tnt_trap_stop.g_~ BEGIN
  OUTER_SPRINT traps_baf_stop ~ClearActions(LastSeenBy)~
END ELSE BEGIN
  OUTER_SPRINT traps_baf_stop ~~
END

ACTION_IF FILE_EXISTS ~override/g_tnt_trap_sound.g_~ BEGIN
  OUTER_SPRINT traps_baf_sound ~PlaySound("act_09")~
END ELSE BEGIN
  OUTER_SPRINT traps_baf_sound ~~
END


INCLUDE ~%MOD_FOLDER%/easy_traps/functions.tph~
INCLUDE ~%MOD_FOLDER%/easy_traps/traps_list.tph~
OUTER_SET new_trap_ind = 0 // global var for all areas

/*
// ToBEx
ACTION_IF GAME_IS ~bg2 tob bgt~ BEGIN
  OUTER_SPRINT TOBEX_MOD_DIRECTORY ~%MOD_FOLDER%~
  LOAD_TRA "%TOBEX_MOD_DIRECTORY%/TobEx_redist/TobEx.tra"
  ACTION_INCLUDE "%TOBEX_MOD_DIRECTORY%/TobEx_redist/TobEx.tpa"
END
*/

APPEND ~STATE.IDS~ ~0x80101FEF CD_STATE_NOTVALID~ UNLESS ~CD_STATE_NOTVALID~ // Adds CD_STATE_NOTVALID state
/* 
APPEND "trigger.ids" "0x4100 NextTriggerObject(O:Object*)" UNLESS "0x4100 NextTriggerObject(O:Object*)" //Expanded Triggers for TobEx and BG:EE
APPEND "shoutids.ids" "1200 G_TRAP" UNLESS "1200 G_TRAP" // New shout
*/
CLEAR_IDS_MAP

COPY_EXISTING_REGEXP GLOB ~.*\.are$~ override
  GET_OFFSET_ARRAY reg_array ARE_V10_REGIONS
  PHP_EACH reg_array AS int => reg_off BEGIN
    READ_SHORT (reg_off + 0x6c) is_trapped
    READ_ASCII (reg_off + 0x7c) reg_script
    PATCH_IF (is_trapped == 0 AND VARIABLE_IS_SET $trap_type(~%reg_script%~)) BEGIN //if it's not trapped but script exists and is a known trap type
      READ_ASCII reg_off reg_name (32) NULL
//      PATCH_PRINT ~Found faulty region: area %SOURCE_FILE%, region %reg_name%, script %reg_script%, trap status is %is_trapped%~
      LPF ALTER_AREA_REGION
        INT_VAR
          trapped = 0
          detected = 0
          trap_detect = 0
          trap_remove = 0
        STR_VAR
          region_name = ~%reg_name%~
          door_script = ~~
      END
    END
  END
  GET_OFFSET_ARRAY cont_array ARE_V10_CONTAINERS
  PHP_EACH cont_array AS int => cont_off BEGIN
    READ_SHORT (cont_off + 0x30) is_trapped
    READ_ASCII (cont_off + 0x48) cont_script
    PATCH_IF (is_trapped == 0 AND VARIABLE_IS_SET $trap_type(~%cont_script%~)) BEGIN //if it's not trapped but script exists and is a known trap type
      READ_ASCII cont_off cont_name (32) NULL
//      PATCH_PRINT ~Found faulty container: area %SOURCE_FILE%, container %cont_name%, script %cont_script%, trap status is %is_trapped%~
      LPF ALTER_AREA_CONTAINER
        INT_VAR
          trapped = 0
          detected = 0
          trap_detect = 0
          trap_remove = 0
        STR_VAR
          container_name = ~%cont_name%~
          container_script = ~~
      END
    END
  END
  GET_OFFSET_ARRAY door_array ARE_V10_DOORS
  PHP_EACH door_array AS int => door_off BEGIN
    READ_SHORT (door_off + 0x70) is_trapped
    READ_ASCII (door_off + 0x80) door_script
    PATCH_IF (is_trapped == 0 AND VARIABLE_IS_SET $trap_type(~%door_script%~)) BEGIN //if it's not trapped but script exists and is a known trap type
      READ_ASCII door_off door_name (32) NULL
//      PATCH_PRINT ~Found faulty door: area %SOURCE_FILE%, door %door_name%, script %door_script%, trap status is %is_trapped%~
      LPF ALTER_AREA_DOOR
        INT_VAR
          trapped = 0
          detected = 0
          trap_detect = 0
          trap_remove = 0
        STR_VAR
          door_name = ~%door_name%~
          door_script = ~~
      END
    END
  END
BUT_ONLY

COPY_EXISTING_REGEXP GLOB ~.*\.are$~ override
  SET reg_size = 0xc4
  READ_SHORT 0x5a reg_num
  READ_LONG  0x5c reg_off

  SET cont_size = 0xc0
  READ_SHORT 0x74 cont_num
  READ_LONG  0x70 cont_off

  SET door_size = 0xc8
  READ_SHORT 0xa4 door_num
  READ_LONG  0xa8 door_off

  PHP_EACH trap_type AS script => string BEGIN
    SET ~%script%_cur~ = 0 // current area script type counter
  END

  str_off = reg_off
  str_size = reg_size
  str_num = reg_num
  rel_script_off = 0x7c
  LAUNCH_PATCH_MACRO G_REPLACE_TRAP_SCRIPTS

  str_off = cont_off
  str_size = cont_size
  str_num = cont_num
  rel_script_off = 0x48
  LAUNCH_PATCH_MACRO G_REPLACE_TRAP_SCRIPTS

  str_off = door_off
  str_size = door_size
  str_num = door_num
  rel_script_off = 0x80
  LAUNCH_PATCH_MACRO G_REPLACE_TRAP_SCRIPTS

BUT_ONLY

//Clone and extend new scripts
ACTION_PHP_EACH clone_source AS clone_ind => script BEGIN
  COPY_EXISTING ~%script%.bcs~ ~override/g_tr%clone_ind%.bcs~
  OUTER_SPRINT trapind $clone_loc_ind(~%clone_ind%~)    //trap index in area: 2
  OUTER_SPRINT trap_type_id ~%script%_%trapind%~        //trap id: GTAR5_2 (for local vars)
  OUTER_SPRINT trap_type_warning $trap_type(~%script%~)  //trap warning string: "Acid arrow trap"
  OUTER_SPRINT clone_id ~g_tr%clone_ind%~
  EXTEND_TOP ~g_tr%clone_ind%.bcs~ ~%MOD_FOLDER%/easy_traps/traps.baf~ EVAL
END

//last, EXTEND vanilla scripts
ACTION_PHP_EACH trap_type AS script => string BEGIN
  ACTION_IF (FILE_EXISTS_IN_GAME ~%script%.bcs~) BEGIN //skip missing scripts
    OUTER_SPRINT trap_type_id ~%script%~  //for EXTEND EVAL
    OUTER_SPRINT trap_type_warning ~%string%~  //for EXTEND EVAL
    OUTER_SPRINT clone_id ~no clone~
    EXTEND_TOP ~%script%.bcs~ ~%MOD_FOLDER%/easy_traps/traps.baf~ EVAL
  END
END
