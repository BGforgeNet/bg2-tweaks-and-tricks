OUTER_SET notification_delay = 12
OUTER_SPRINT unknown_trap_name (AT 100)
OUTER_SPRINT trap_lower (AT 99)
OUTER_SPRINT trap_capitalized (AT 98)
PRINT ~unknown_trap_name=%unknown_trap_name%~
OUTER_SPRINT common_timer ~%modder_prefix%tnt_traps_common_timer~
INCLUDE ~%comp_dir%/traps_tra.tpa~

ACTION_IF FILE_EXISTS ~override/g_tnt_trap_combat.g_~ BEGIN
  OUTER_SPRINT traps_baf_combat ~~
END ELSE BEGIN
  OUTER_SPRINT traps_baf_combat ~CombatCounterLT(1)~
END

ACTION_IF FILE_EXISTS ~override/g_tnt_trap_pause1.g_~ BEGIN //pause on all traps
  OUTER_SPRINT traps_baf_stop ~~
  OUTER_SPRINT traps_baf_pause ~ActionOverride(LastSeenBy, PauseGame())~
END ELSE BEGIN
  OUTER_SPRINT traps_baf_pause ~~
END

ACTION_IF FILE_EXISTS ~override/g_tnt_trap_range.g_~ BEGIN
  OUTER_SPRINT traps_baf_range ~Range(LastSeenBy, 30)~
END ELSE BEGIN
  OUTER_SPRINT traps_baf_range ~Range(LastSeenBy, 15)~
END

ACTION_IF FILE_EXISTS ~override/g_tnt_trap_view.g_~ BEGIN
  OUTER_SPRINT traps_baf_view ~MoveViewObject(LastSeenBy, INSTANT)~
END ELSE BEGIN
  OUTER_SPRINT traps_baf_view ~~
END

ACTION_IF FILE_EXISTS ~override/g_tnt_trap_stop.g_~ BEGIN
  OUTER_SPRINT traps_baf_stop ~ClearActions(LastSeenBy)~
  OUTER_SPRINT traps_baf_pause ~~
END ELSE BEGIN
  OUTER_SPRINT traps_baf_stop ~~
END

ACTION_IF FILE_EXISTS ~override/g_tnt_trap_sound.g_~ BEGIN
  OUTER_SPRINT traps_baf_sound ~PlaySound("act_09")~
END ELSE BEGIN
  OUTER_SPRINT traps_baf_sound ~~
END


INCLUDE ~%comp_dir%/functions.tpa~
INCLUDE ~%comp_dir%/traps_list.tpa~

APPEND ~STATE.IDS~ ~0x80101FEF CD_STATE_NOTVALID~ UNLESS ~CD_STATE_NOTVALID~ // Adds CD_STATE_NOTVALID state
CLEAR_IDS_MAP

// clear faulty scripts, assign new ground ones
COPY_EXISTING_REGEXP GLOB ~.*\.are$~ ~override~
  LPF GET_AREA_DETECTABLE_TRAP_SCRIPTS STR_VAR type = ~region~ RET found = count RET_ARRAY scripts END
  PATCH_IF found > 0 BEGIN
    PHP_EACH scripts AS i => s BEGIN
      valid_trap_script = 0
      idx = ~%i_0%~
      SPRINT type ~%i_1%~
      detection = ~%i_2%~
      removal = ~%i_3%~
      resets = ~%i_4%~
      trap_index = 0 // this is used for unique MYAREA vars
      SPRINT are_file ~%SOURCE_FILE%~ // record to reset after inner action
      INNER_ACTION BEGIN // should be INNER_PATCH_FILE, but weidu has a bug https://github.com/WeiDUorg/weidu/issues/168
        COPY_EXISTING ~%s%.bcs~ override
          DECOMPILE_AND_PATCH BEGIN
            entered = INDEX_BUFFER (CASE_SENSITIVE EXACT_MATCH ~Entered(~ )
            spell = INDEX_BUFFER (CASE_SENSITIVE EVALUATE_REGEXP ~[ %TAB%^]\(Spell\|ForceSpell\|ReallyForceSpell\|ApplySpell\|SpellNoDec\|ReallyForceSpellDead\)\(Point\)? ?(.+,~ )
            PATCH_IF entered != "-1" AND spell != "-1" BEGIN
              valid_trap_script = 1
              trap_index += 1
              LPF get_spell_res_from_baf INT_VAR spell_index_buffer = spell RET spell_res END
              PATCH_IF NOT VARIABLE_IS_SET $script_map(~%s%~ ~%type%~ ~%trap_index%~ ~%detection%~ ~%removal%~ ~%resets%~ ~%spell_res%~) BEGIN
                LPF GET_UNIQUE_FILE_NAME
                  STR_VAR
                    extension = ~bcs~
                    base = ~%modder_prefix%tnt_traps_%s%_%type%_%trap_index%_%detection%_%removal%_%resets%_%spell_res%~
                  RET new_script = filename
                END
                SPRINT $script_map(~%s%~ ~%type%~ ~%trap_index%~ ~%detection%~ ~%removal%~ ~%resets%~ ~%spell_res%~) ~%new_script%~

                INNER_ACTION BEGIN COPY_EXISTING ~%s%.bcs~ ~override/%new_script%.bcs~ END
                SPRINT trap_var_base ~%modder_prefix%tnt_traps%new_script%~
                
                SPRINT is_active ~~ // containers and doors
                // ground traps IsActive clause
                PATCH_IF (~%type%~ STR_EQ ~region~) BEGIN SPRINT is_active ~IsActive(Myself)~ END

                LPF calculate_trap_warning_string
                  STR_VAR
                    spell_res
                    unknown = ~%unknown_trap_name%~
                    trap_lower
                    trap_capitalized
                  RET trap_warning_string = string
                END
                PATCH_PRINT ~trap_warning_string=%trap_warning_string%~
                INNER_ACTION BEGIN EXTEND_TOP ~%new_script%.bcs~ ~%comp_dir%/traps.baf~ EVAL END

              END ELSE BEGIN
                SPRINT new_script $script_map(~%s%~ ~%type%~ ~%trap_index%~ ~%detection%~ ~%removal%~ ~%resets%~ ~%spell_res%~)
              END
            END
          END
        BUT_ONLY
      END // inner action end

      // Reset vars after inner action. Workaround for weidu bug https://github.com/WeiDUorg/weidu/issues/168
      INNER_ACTION BEGIN COPY_EXISTING ~%are_file%~ override BUT_ONLY END
      // assign new script
      PATCH_IF valid_trap_script == 1 BEGIN
        LPF WRITE_AREA_STRUCT_SCRIPT
          INT_VAR index = idx
          STR_VAR script = ~%new_script%~ type = ~region~
        END
      END

    END
  END
BUT_ONLY
