OUTER_SPRINT comp_baf_dir ~%comp_dir%/baf~
OUTER_SET notification_delay = 12
OUTER_SET intuition_delay = 24
OUTER_SPRINT unknown_trap_name (AT 100)
OUTER_SPRINT trap_lower (AT 99)
OUTER_SPRINT trap_capitalized (AT 98)
OUTER_SPRINT intuition_timer ~%modder_prefix%traps_intuition_timer~

OUTER_SPRINT traps_minion ~g_traps~
LAF CREATE_MINION STR_VAR cre = ~%traps_minion%~ script = ~g_traps~ ea = ~FAMILIAR~ END
COMPILE ~%comp_baf_dir%/g_traps.baf~

INCLUDE ~%comp_dir%/traps_tra.tpa~
INCLUDE ~%comp_dir%/subcomponents.tpa~
INCLUDE ~%comp_dir%/functions.tpa~
INCLUDE ~%comp_dir%/traps_list.tpa~

OUTER_SPRINT traps_baf_class ~~
// shaman is in ee only
ACTION_IF IDS_OF_SYMBOL (~class~ ~shaman~) != "-1" BEGIN
  OUTER_SPRINT traps_baf_class
  ~OR(3)
    Detect([GOODCUTOFF.0.0.THIEF_ALL])
    Detect([GOODCUTOFF.0.0.MONK])
    Detect([GOODCUTOFF.0.0.SHAMAN])
~
END ELSE BEGIN
  OUTER_SPRINT traps_baf_class
  ~OR(2)
    Detect([GOODCUTOFF.0.0.THIEF_ALL])
    Detect([GOODCUTOFF.0.0.MONK])
~
END

// instant detection spell
OUTER_SPRINT trap_spl ~%modder_prefix%trap~
LAF CREATE_SPELL STR_VAR spell = ~%trap_spl%~ END
COPY_EXISTING ~%trap_spl%.spl~ override
  LPF ADD_SPELL_HEADER INT_VAR target = TARGET_HEADER_self END
  LPF ADD_SPELL_EFFECT INT_VAR opcode = OPCODE_find_traps target = TARGET_FEATURE_self END
BUT_ONLY

// we don't want incapacitated thieves detecting
APPEND ~STATE.IDS~ ~0x80101FEF CD_STATE_NOTVALID~ UNLESS ~CD_STATE_NOTVALID~
CLEAR_IDS_MAP

ACTION_DEFINE_ASSOCIATIVE_ARRAY struct_types BEGIN
  ~region~ => ~Entered(~
  ~door~ => ~Opened(~
  ~container~ => ~Opened(~
END

// create new scripts and assign them
COPY_EXISTING_REGEXP GLOB ~.*\.are$~ ~override~
  PHP_EACH struct_types AS type => trigger BEGIN
    CLEAR_ARRAY scripts
    LPF GET_AREA_DETECTABLE_TRAP_SCRIPTS STR_VAR type RET found = count RET_ARRAY scripts END
    PATCH_IF found > 0 BEGIN
      PHP_EACH scripts AS i => s BEGIN
        valid_trap_script = 0
        idx = ~%i_0%~
        SPRINT type ~%i_1%~
        detection = ~%i_2%~
        removal = ~%i_3%~
        resets = ~%i_4%~
        trap_index = 0 // this is used for unique MYAREA vars
        SPRINT are_file ~%SOURCE_FILE%~ // record to reset after inner action

        // location for minion to display the string at actual trap location, not trap launch point
        LPF GET_AREA_STRUCTURE_CENTER_POINT INT_VAR index = idx STR_VAR type RET x=x_center y=y_center END

        INNER_ACTION BEGIN // should be INNER_PATCH_FILE, but weidu has a bug https://github.com/WeiDUorg/weidu/issues/168
          COPY_EXISTING ~%s%.bcs~ override
            DECOMPILE_AND_PATCH BEGIN
              triggered = INDEX_BUFFER (CASE_INSENSITIVE EXACT_MATCH ~%trigger%~ )
              spell = INDEX_BUFFER (CASE_INSENSITIVE EVALUATE_REGEXP ~[ %TAB%^]\(Spell\|ForceSpell\|ReallyForceSpell\|ApplySpell\|SpellNoDec\|ReallyForceSpellDead\)\(Point\)? ?(.+,~ )
              PATCH_IF triggered != "-1" AND spell != "-1" BEGIN
                valid_trap_script = 1
                trap_index += 1
                LPF get_spell_res_from_baf INT_VAR spell_index_buffer = spell RET spell_res END
                PATCH_IF NOT VARIABLE_IS_SET $script_map(~%s%~ ~%type%~ ~%trap_index%~ ~%detection%~ ~%removal%~ ~%resets%~ ~%spell_res%~ ~%x%~ ~%y%~) BEGIN
                  LPF GET_UNIQUE_FILE_NAME
                    STR_VAR
                      extension = ~bcs~
                      base = ~%modder_prefix%tnt_traps_%s%_%type%_%trap_index%_%detection%_%removal%_%resets%_%spell_res%_%x%_%y%~
                    RET new_script = filename
                  END
                  SPRINT $script_map(~%s%~ ~%type%~ ~%trap_index%~ ~%detection%~ ~%removal%~ ~%resets%~ ~%spell_res%~ ~%x%~ ~%y%~) ~%new_script%~

                  INNER_ACTION BEGIN COPY_EXISTING ~%s%.bcs~ ~override/%new_script%.bcs~ END
                  SPRINT trap_var_base ~%modder_prefix%tnt_traps%new_script%~

                  SPRINT is_active ~~ // containers and doors
                  // ground traps IsActive clause
                  PATCH_IF (~%type%~ STR_EQ ~region~) BEGIN SPRINT is_active ~IsActive(Myself)~ END

                  LPF calculate_trap_warning_string
                    STR_VAR
                      spell_res
                      unknown = ~%unknown_trap_name%~
                      trap_lower
                      trap_capitalized
                    RET trap_warning_string = string
                  END
                  INNER_ACTION BEGIN
                    EXTEND_TOP ~%new_script%.bcs~ ~%comp_baf_dir%/main.baf~ EVAL
                    EXTEND_TOP ~%new_script%.bcs~ ~%comp_baf_dir%/displaystring.baf~ EVAL
                    ACTION_IF intuition == 1 BEGIN
                      EXTEND_TOP ~%new_script%.bcs~ ~%comp_baf_dir%/intuition.baf~ EVAL
                    END
                    EXTEND_TOP ~%new_script%.bcs~ ~%comp_baf_dir%/detection.baf~ EVAL
                  END

                END ELSE BEGIN
                  SPRINT new_script $script_map(~%s%~ ~%type%~ ~%trap_index%~ ~%detection%~ ~%removal%~ ~%resets%~ ~%spell_res%~)
                END
              END
            END
          BUT_ONLY
        END // inner action end

        // Reset vars after inner action. Workaround for weidu bug https://github.com/WeiDUorg/weidu/issues/168
        INNER_ACTION BEGIN COPY_EXISTING ~%are_file%~ override BUT_ONLY END
        // assign new script
        PATCH_IF valid_trap_script == 1 BEGIN
          LPF WRITE_AREA_STRUCT_SCRIPT
            INT_VAR index = idx
            STR_VAR script = ~%new_script%~ type = ~%type%~
          END
        END

      END
    END
  END
BUT_ONLY
