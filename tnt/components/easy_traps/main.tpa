INCLUDE ~%lib_dir%/tobex.tpa~
OUTER_SPRINT comp_baf_dir ~%comp_dir%/baf~
OUTER_SET notification_delay = 12
OUTER_SET intuition_delay = 24
OUTER_SET pause_delay = 36
OUTER_SPRINT trap_unknown (AT 100)
OUTER_SPRINT trap_capitalized (AT 98)
OUTER_SPRINT intuition_timer ~%modder_prefix%traps_intuition_timer~
OUTER_SPRINT pause_timer ~%modder_prefix%traps_pause_timer~

// On EE, DisplayStringNoNameHead disappears nearly instantly, adding a delay
ACTION_IF ENGINE_IS ~bgee bg2ee eet iwdee pstee~ BEGIN
  OUTER_SPRINT ee_trap_type_string_delay ~Wait(4)~
END ELSE BEGIN
  OUTER_SPRINT ee_trap_type_string_delay ~~
END

// temp minion for DisplayString centered on actual trap
OUTER_SPRINT traps_minion_notification ~g_traps2~
LAF CREATE_MINION STR_VAR cre = ~%traps_minion_notification%~ END

INCLUDE ~%comp_dir%/traps_tra.tpa~
INCLUDE ~%comp_dir%/subcomponents.tpa~
INCLUDE ~%comp_dir%/functions.tpa~

// baf class check
OUTER_SPRINT traps_baf_class ~
  Detect([GOODCUTOFF.0.0.THIEF_ALL])
  Detect([GOODCUTOFF.0.0.MONK])
~
OUTER_SET or_count = 2
// shaman is in ee only
ACTION_IF IDS_OF_SYMBOL (~class~ ~shaman~) != "-1" BEGIN
  OUTER_SPRINT traps_baf_class ~%traps_baf_class% Detect([GOODCUTOFF.0.0.SHAMAN])~
  OUTER_SET or_count += 1
END
// https://github.com/Gibberlings3/Skills-and-Abilities/tree/main/skills-and-abilities
ACTION_IF MOD_IS_INSTALLED ~skills-and-abilities.tp2~ (ID_OF_LABEL ~skills-and-abilities.tp2~ ~SkillsAndAbilitiesBard2~) BEGIN
  OUTER_SPRINT traps_baf_class ~%traps_baf_class% Detect([GOODCUTOFF.0.0.BARD_ALL])~
  OUTER_SET or_count += 1
END
ACTION_IF MOD_IS_INSTALLED ~skills-and-abilities.tp2~ (ID_OF_LABEL ~skills-and-abilities.tp2~ ~SkillsAndAbilitiesRang~) BEGIN
  OUTER_SPRINT traps_baf_class ~%traps_baf_class% Detect([GOODCUTOFF.0.0.RANGER_ALL])~
  OUTER_SET or_count += 1
END
//apply OR
OUTER_SPRINT traps_baf_class ~OR(%or_count%) %traps_baf_class%~

// instant detection spell
OUTER_SPRINT trap_spl ~%modder_prefix%trap~
LAF CREATE_SPELL STR_VAR spell = ~%trap_spl%~ END
COPY_EXISTING ~%trap_spl%.spl~ override
  LPF ADD_SPELL_HEADER INT_VAR target = TARGET_HEAD_self END
  LPF ADD_SPELL_EFFECT INT_VAR opcode = OPCODE_find_traps target = TARGET_FX_self END
BUT_ONLY

ACTION_DEFINE_ASSOCIATIVE_ARRAY struct_types BEGIN
  ~region~ => ~Entered(~
  ~door~ => ~Opened(~
  ~container~ => ~Opened(~
END

// create new scripts and assign them
COPY_EXISTING_REGEXP GLOB ~.*\.are$~ ~override~
  PHP_EACH struct_types AS type => trigger BEGIN
    CLEAR_ARRAY scripts
    LPF GET_AREA_DETECTABLE_TRAP_SCRIPTS STR_VAR type RET found = count RET_ARRAY scripts END
    PATCH_IF found > 0 BEGIN
      PHP_EACH scripts AS i => s BEGIN

        PATCH_IF NOT (~%s%~ STR_EQ ~TRPSKEL~) BEGIN // durlag tower level 3 skeleton trap (false exit)

          valid_trap_script = 0
          idx = ~%i_0%~
          SPRINT type ~%i_1%~
          detection = ~%i_2%~
          removal = ~%i_3%~
          resets = ~%i_4%~
          trap_index = 0 // this is used for unique MYAREA vars
          SPRINT are_file ~%SOURCE_FILE%~ // record to reset after inner action

          // location for minion to display the string at actual trap location, not trap launch point
          LPF GET_AREA_STRUCTURE_CENTER_POINT INT_VAR index = idx STR_VAR type RET x y END

          INNER_ACTION BEGIN // should be INNER_PATCH_FILE, but weidu has a bug https://github.com/WeiDUorg/weidu/issues/168
            COPY_EXISTING ~%s%.bcs~ override
              DECOMPILE_AND_PATCH BEGIN
                triggered = INDEX_BUFFER (CASE_INSENSITIVE EXACT_MATCH ~%trigger%~ )
                LPF get_spell_res_from_baf_buffer RET spell_res END

                PATCH_IF triggered != "-1" AND NOT (~%spell_res%~ STRING_EQUAL ~~) BEGIN
                  valid_trap_script = 1
                  trap_index += 1  // trap index inside area, to distinguish local vars
                  PATCH_IF NOT VARIABLE_IS_SET $script_map(~%s%~ ~%type%~ ~%trap_index%~ ~%detection%~ ~%removal%~ ~%resets%~ ~%spell_res%~ ~%x%~ ~%y%~) BEGIN
                    LPF GET_UNIQUE_FILE_NAME
                      STR_VAR
                        extension = ~bcs~
                        base = ~%modder_prefix%tnt_traps_%s%_%type%_%trap_index%_%detection%_%removal%_%resets%_%spell_res%_%x%_%y%~
                      RET new_script = filename
                    END
                    SPRINT $script_map(~%s%~ ~%type%~ ~%trap_index%~ ~%detection%~ ~%removal%~ ~%resets%~ ~%spell_res%~ ~%x%~ ~%y%~) ~%new_script%~

                    INNER_ACTION BEGIN COPY_EXISTING ~%s%.bcs~ ~override/%new_script%.bcs~ END
                    SPRINT trap_var_base ~%modder_prefix%tnt_traps%new_script%~

                    // regions can be "inactive"
                    SPRINT is_active ~~ // containers and doors
                    PATCH_IF (~%type%~ STR_EQ ~region~) BEGIN SPRINT is_active ~IsActive(Myself)~ END

                    // autopause handling
                    SPRINT traps_baf_pause_toggle ~False()~
                    PATCH_IF autopause == 1 AND (~%type%~ STR_EQ ~region~) BEGIN SPRINT traps_baf_pause_toggle ~~ END
                    PATCH_IF autopause == 2 BEGIN SPRINT traps_baf_pause_toggle ~~ END

                    // trap floats
                    PATCH_IF reminders != 0 BEGIN
                      simple_floats = 1 // disclose type?
                      PATCH_IF reminders == 2 BEGIN simple_floats = 0 END
                      LPF calculate_trap_warning_string
                        INT_VAR simple = simple_floats
                        STR_VAR
                          spell_res
                          trap_unknown
                          trap_capitalized
                        RET trap_warning_string = string
                      END
                    END

                    INNER_ACTION BEGIN
                      EXTEND_TOP ~%new_script%.bcs~ ~%comp_baf_dir%/main.baf~ EVAL
                      ACTION_IF reminders != 0 BEGIN
                        EXTEND_TOP ~%new_script%.bcs~ ~%comp_baf_dir%/displaystring.baf~ EVAL
                      END
                      ACTION_IF intuition == 1 BEGIN
                        EXTEND_TOP ~%new_script%.bcs~ ~%comp_baf_dir%/intuition.baf~ EVAL
                      END
                      EXTEND_TOP ~%new_script%.bcs~ ~%comp_baf_dir%/detection.baf~ EVAL
                    END

                  END ELSE BEGIN
                    SPRINT new_script $script_map(~%s%~ ~%type%~ ~%trap_index%~ ~%detection%~ ~%removal%~ ~%resets%~ ~%spell_res%~ ~%x%~ ~%y%~)
                  END
                END ELSE BEGIN
                  PATCH_PRINT ~script %s% is not a normal trap. triggered=%triggered%, spell_res="%spell_res%"~
                END
              END
            BUT_ONLY
          END // inner action end

          // Reset vars after inner action. Workaround for weidu bug https://github.com/WeiDUorg/weidu/issues/168
          INNER_ACTION BEGIN COPY_EXISTING ~%are_file%~ override BUT_ONLY END
          // assign new script
          PATCH_IF valid_trap_script == 1 BEGIN
            LPF ALTER_AREA_STRUCTURE_SCRIPT
              INT_VAR index = idx
              STR_VAR script = ~%new_script%~ type = ~%type%~
            END
          END

        END // single script patch
      END // PHP_EACH scripts
    END // if found > 0
  END
BUT_ONLY
