/*
High level overview

1. LastSummonerOf doesn't work for clones. The only other place where the information about clone's master is stored is PUPPETMASTERID stat. But there's seemingly no way to retrieve it with scripting or opcodes.
2. So PI spell creates a spy to track and remove spells.
3. Can't use clone itself for tracking and removing, because script commands will interfere with player actions.
4. LastSummonerOf does work for the spy. It's set to the original caster.
5. On creation, the spy starts to listen for a custom shout.
6. PI spell assigns a short script to the created clone.
7. On creation, the clone shouts the custom shout.
8. The spy hears the shout. It now has both objects: LastHeardBy=clone, LastSummoneerOf=caster.
9. The spy switches its initial script to the main one. It's no longer listening, so following PI casts won't interfere.
10. The main script tracks each spell cast by the clone in local vars, incrementing them.
11. Removing them right away result in missing some. (Something's off with action queue.)
12. Instead, once the image has ended or is destroyed, the spy goes over each local var and decrements them until each cast spell is accounted for.
13. Once all vars are back to 0, the spy destroys itself.

It is still less than perfect, sometimes spells seem to slip through.
*/



// Build lists of all spells. Just mage and cleric for now.
// Wizard first, for faster removal - probably most casters will be single class mages.
COPY_EXISTING ~spell.ids~ ~override~
  READ_2DA_ENTRIES_NOW rows 2
  TEXT_SPRINT final_check_list ~~
  FOR (row = 0; row < rows; ++row) BEGIN 
    READ_2DA_ENTRY_FORMER rows row 1 spell_id
    TEXT_SPRINT spell_final_res EVAL ~%%spell_id%%~
    PATCH_IF (~%spell_id%~ STRING_MATCHES_REGEXP ~WIZARD_.*~) == 0 BEGIN
      DEFINE_ASSOCIATIVE_ARRAY wizard_spells BEGIN ~%row%~ => ~%spell_id%~ END
      TEXT_SPRINT final_check_list ~%final_check_list%
        Global("%spell_final_res%", "LOCALS", 0)~
    END ELSE BEGIN
      PATCH_IF (~%spell_id%~ STRING_MATCHES_REGEXP ~CLERIC_.*~) == 0 BEGIN
        DEFINE_ASSOCIATIVE_ARRAY cleric_spells BEGIN ~%row%~ => ~%spell_id%~ END
        TEXT_SPRINT final_check_list ~%final_check_list%
          Global("%spell_final_res%", "LOCALS", 0)~
      END
    END
  END
BUT_ONLY

// PI spy
OUTER_TEXT_SPRINT pi_spy_cre ~g_pispy~
OUTER_TEXT_SPRINT pi_spy_script0 ~g_pispy0~ // initial script
OUTER_TEXT_SPRINT pi_spy_script1 ~g_pispy1~ // real script
LAF create_spy STR_VAR cre = ~%pi_spy_cre%~ script = ~%pi_spy_script0%~ END
COPY_EXISTING ~%WIZARD_PROJECT_IMAGE%.spl~ override
  LPF ADD_SPELL_EFFECT
    INT_VAR
      opcode = OPCODE_use_eff_file // external effect to get rid of smoke cloud on spy creation
      target = TARGET_FEATURE_self
      insert_point = 0
      duration = 1000
      timing = TIMING_duration
      parameter1 = 0 // anyone
      parameter2 = 2 // EA.ids
    STR_VAR
      resource = ~g_pi_spy~
  END
BUT_ONLY
COPY ~%comp_dir%/g_pi_spy.eff~ override
  WRITE_ASCIIT 0x30 ~g_pispy~
  WRITE_ASCIIT 0x70 ~shskull~

// add unique shout to ids
LAF g_add_ids_unique STR_VAR ids = ~shoutids~ label = ~g_pnp_pi~ RET g_pnp_pi_shout = index END

// spy: listen once for a shout
COMPILE EVAL ~%comp_dir%/%pi_spy_script0%.baf~

// spy: main script. Once heard, don't listen anymore, keep LastHeardBy intact.
COMPILE EVAL ~%comp_dir%/%pi_spy_script1%.baf~

// clone: announce self once
OUTER_TEXT_SPRINT pi_script ~g_pnp_pi~
COMPILE EVAL ~%comp_dir%/%pi_script%.baf~

ACTION_PHP_EACH wizard_spells AS int => spell BEGIN
  OUTER_TEXT_SPRINT spell_res EVAL ~%%spell%%~
  EXTEND_BOTTOM ~%pi_spy_script1%.bcs~ ~%comp_dir%/g_pispy1_spell_block.baf~ EVAL
END
ACTION_PHP_EACH cleric_spells AS int => spell BEGIN
  OUTER_TEXT_SPRINT spell_res EVAL ~%%spell%%~
  EXTEND_BOTTOM ~%pi_spy_script1%.bcs~ ~%comp_dir%/g_pispy1_spell_block.baf~ EVAL
END

// assign shout script to the clone
COPY_EXISTING ~projimag.spl~ override
  LPF ADD_SPELL_CFEFFECT
    INT_VAR
      opcode = OPCODE_set_ai_script
      target = TARGET_FEATURE_self
      timing = TIMING_permanent
      parameter2 = SCRIPT_TYPE_override 
    STR_VAR
      resource = ~%pi_script%~
      resource2 = ~shskull~
  END
BUT_ONLY
